
#ifndef EVENT_MODEL_HPP_VP_2006_03_21
#define EVENT_MODEL_HPP_VP_2006_03_21

#include <QString>
class QWidget;

/** Данный класс описывает событие для целей визуализации.

    Указатели на Event_model возвращаются методом Trace_model::next_event.
    Предполагается. что все экземпляры объектов относительно коротко-живущие,
    и в архитектуре не делается никаких попыток вынести информацию, общую для
    собитый одного типа в отдельный класс.
*/
class Event_model
{
public:
    /** Врямя возникновения события. */
    unsigned time;
    
    /** Тип события (строка). Используется только для показа типа 
        события в пользовательком интерфейсе.
    */
    QString kind;
    
    /** Буква, используемая для показа события. Визуализатором всегда
       показывается как заглавная. */
    char letter;
    
    /** Дополнительная буква, используемая для показа события. Визуализатором всегда
    показывается как строчная. Рисуется справа от основной буквы меньшим шрифтом. 
    Если равна нулю, не показывается. */
    char subletter;
    
    /** Позиция буквы относительно "засечки" события. */
    enum letter_position_t { left_top = 1, right_top, right_bottom, left_bottom} 
    letter_position;
    
    /** Номер компонента, в котором произошло событие. Этот номен является
        локальным для объекта Trace_model, из которого было получено событие.
    */
    unsigned component;

    /** Метод может быть перегружен унаследованными классами, чтобы предоставить
    специфичный метод показа детальной информации о событии. Возвращаемый оьъект
    по возможности должен иметь "диалоговый" цвет фона. Объект удаляется вызывающей
    стороной. Гарантируется, что событие для которого был создан объект, не будет
    удалено раньше объекта. 
    */
    virtual QWidget* createDetailsWidget(const QWidget* parent) { return 0; }
    
    virtual ~Event_model() {}
    
protected:
    /** Создает объект, пригодный для показа текстовой детальной информации о событии. 
    Унаследованные классы могут использовать этот метод в своей реализации createDetailsWidget,
    если и них есть детальная информация как строка, и при этом не требуется тонкий контроль
    за представлением этой информации.
    */
    QWidget* createTextDetailsWidget(const QString& text, const QWidget* parent);
};

#endif
